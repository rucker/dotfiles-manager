#!/usr/bin/python

import io
import os

import env
import ioutils
from constants import Systems, Srcfiles, Dotfiles

def appendEnvScriptsDirToOutputBuffer(fileBuffer):
    ioutils.writeToOutputBuffer("scriptsDir=\"" + env.scriptsDir + "\"\n\n", fileBuffer)

def writeHeader(fileName, fileBuffer):
    ioutils.writeToOutputBuffer("#!/bin/bash\n# ~/" + fileName + ": executed by bash(1) for non-login shells.\n# This file was generated by a script. Do not edit manually!\n\n", fileBuffer)

def compileBashFile(platform):
    if platform == Systems.DARWIN.value:
        bashFile = Dotfiles.BASH_PROFILE.value
        if env.isGnu == True:
            bashPlatformFile = Srcfiles.BASH_MAC_GNU.value
        else:
            bashPlatformFile = Srcfiles.BASH_MAC_BSD.value
    elif platform == Systems.LINUX.value:
        bashFile = Dotfiles.BASHRC.value
        bashPlatformFile = Srcfiles.BASH_LINUX.value

    ioutils.output("Compiling file: " + bashFile)
    with io.StringIO() as fileBuffer:
        writeHeader(bashFile, fileBuffer)
        appendEnvScriptsDirToOutputBuffer(fileBuffer)
        ioutils.writeRequiredInputFileContents(Srcfiles.BASH_COMMON.value, fileBuffer)
        ioutils.writeOptionalInputFileContents(bashPlatformFile, fileBuffer)
        print env.args
        if env.args.no_local == False:
            ioutils.writeOptionalInputFileContents(Srcfiles.BASH_LOCAL.value, fileBuffer)
        ioutils.writeOutputFile(env.outputFilesDir + bashFile, fileBuffer)
        ioutils.output("File completed.\n")

def compileBashProfile():
    compileBashFile(Systems.DARWIN.value)
def compileBashrc():
    compileBashFile(Systems.LINUX.value)

def compileBashFiles():
    compileBashProfile()
    compileBashrc()
